nohup: ignoring input
[36m[[[airflow-5686]]][0m
[[[ Node ]]]
if self.http_conn_id:
    conn = self.get_connection(self.http_conn_id)
    if isinstance(conn.host, type(None)):
        conn.host = ''
    if '://' in conn.host:
        self.base_url = conn.host
    else:
        schema = conn.schema if conn.schema else 'http'
        self.base_url = schema + '://' + conn.host
    if conn.port:
        self.base_url = self.base_url + ':' + str(conn.port)
    if conn.login:
        session.auth = (conn.login, conn.password)
    if conn.extra:
        try:
            session.headers.update(conn.extra_dejson)
        except TypeError:
            self.log.warn('Connection to %s has invalid extra field.', conn.host)
[32mPASSED![0m
Time :  8.34 seconds

[36m[[[airflow-6036]]][0m
[31mFAILED...[0m
Time :  0.0 seconds

[36m[[[airflow-14513]]][0m
[[[ Node ]]]
while True:
    logs = self.read_pod_logs(pod, timestamps=True, since_seconds=read_logs_since_sec)
    for line in logs:
        (timestamp, message) = self.parse_log_line(line.decode('utf-8'))
        last_log_time = pendulum.parse(timestamp)
        self.log.info(message)
    time.sleep(1)
    if not self.base_container_is_running(pod):
        break
    self.log.warning('Pod %s log read interrupted', pod.metadata.name)
    if isinstance(last_log_time, type(None)):
        continue
    delta = pendulum.now() - last_log_time
    read_logs_since_sec = math.ceil(delta.total_seconds())
[32mPASSED![0m
Time :  31.35 seconds

PASSED :  2 / 3
PASSED :  0 / 0
PASSED :  0 / 0
[36m[[[core-1972]]][0m
[[[ Node ]]]
check = condition.from_config(action)(self.hass, variables)
[32mPASSED![0m
Time :  3.16 seconds

[36m[[[core-8065]]][0m
[[[ Node ]]]
ids = sorted(self.entities, key=lambda x: x if isinstance(self.entities[x].name, type(None)) else self.entities[x].name)
[32mPASSED![0m
Time :  8.01 seconds

[36m[[[core-20233]]][0m
[[[ Node ]]]
try:
    variables['value_json'] = json.loads(value)
except ValueError:
    pass
except TypeError:
    pass
[32mPASSED![0m
Time :  3.81 seconds

[36m[[[core-32222]]][0m
[[[ Node ]]]
if self.is_wired != self.client.is_wired:
    if not self.wired_bug:
        self.wired_bug = dt_util.utcnow()
    since_last_seen = dt_util.utcnow() - self.wired_bug
else:
    self.wired_bug = None
    if isinstance(self.client.last_seen, type(None)):
        return False
    since_last_seen = dt_util.utcnow() - dt_util.utc_from_timestamp(float(self.client.last_seen))
[32mPASSED![0m
Time :  15.57 seconds

[36m[[[core-40034]]][0m
[[[ Node ]]]
while to_process:
    config = to_process.popleft()
    import homeassistant
    if isinstance(config, homeassistant.helpers.template.Template):
        continue
    condition = config[CONF_CONDITION]
    if condition in ('and', 'not', 'or'):
        to_process.extend(config['conditions'])
        continue
    entity_ids = config.get(CONF_ENTITY_ID)
    if isinstance(entity_ids, str):
        entity_ids = [entity_ids]
    if entity_ids is not None:
        referenced.update(entity_ids)
[[[ Node ]]]
while to_process:
    config = to_process.popleft()
    import homeassistant
    if isinstance(config, homeassistant.helpers.template.Template):
        continue
    condition = config[CONF_CONDITION]
    if condition in ('and', 'not', 'or'):
        to_process.extend(config['conditions'])
        continue
    if condition != 'device':
        continue
    device_id = config.get(CONF_DEVICE_ID)
    if device_id is not None:
        referenced.add(device_id)
[32mPASSED![0m
Time :  17.34 seconds

PASSED :  5 / 5
PASSED :  0 / 0
PASSED :  0 / 0
[36m[[[pandas-15941]]][0m
